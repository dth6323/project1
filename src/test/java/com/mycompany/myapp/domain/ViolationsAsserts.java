package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ViolationsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViolationsAllPropertiesEquals(Violations expected, Violations actual) {
        assertViolationsAutoGeneratedPropertiesEquals(expected, actual);
        assertViolationsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViolationsAllUpdatablePropertiesEquals(Violations expected, Violations actual) {
        assertViolationsUpdatableFieldsEquals(expected, actual);
        assertViolationsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViolationsAutoGeneratedPropertiesEquals(Violations expected, Violations actual) {
        assertThat(expected)
            .as("Verify Violations auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViolationsUpdatableFieldsEquals(Violations expected, Violations actual) {
        assertThat(expected)
            .as("Verify Violations relevant properties")
            .satisfies(e -> assertThat(e.getViolationTime()).as("check violationTime").isEqualTo(actual.getViolationTime()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getEvidenceImage()).as("check evidenceImage").isEqualTo(actual.getEvidenceImage()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViolationsUpdatableRelationshipsEquals(Violations expected, Violations actual) {
        assertThat(expected)
            .as("Verify Violations relationships")
            .satisfies(e ->
                assertThat(e.getVehicleRegistrations()).as("check vehicleRegistrations").isEqualTo(actual.getVehicleRegistrations())
            );
    }
}
