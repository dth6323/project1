package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TypeViolationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeViolationAllPropertiesEquals(TypeViolation expected, TypeViolation actual) {
        assertTypeViolationAutoGeneratedPropertiesEquals(expected, actual);
        assertTypeViolationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeViolationAllUpdatablePropertiesEquals(TypeViolation expected, TypeViolation actual) {
        assertTypeViolationUpdatableFieldsEquals(expected, actual);
        assertTypeViolationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeViolationAutoGeneratedPropertiesEquals(TypeViolation expected, TypeViolation actual) {
        assertThat(expected)
            .as("Verify TypeViolation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeViolationUpdatableFieldsEquals(TypeViolation expected, TypeViolation actual) {
        assertThat(expected)
            .as("Verify TypeViolation relevant properties")
            .satisfies(e -> assertThat(e.getViolationName()).as("check violationName").isEqualTo(actual.getViolationName()))
            .satisfies(e ->
                assertThat(e.getFineAmount()).as("check fineAmount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getFineAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeViolationUpdatableRelationshipsEquals(TypeViolation expected, TypeViolation actual) {
        assertThat(expected)
            .as("Verify TypeViolation relationships")
            .satisfies(e -> assertThat(e.getViolations()).as("check violations").isEqualTo(actual.getViolations()));
    }
}
