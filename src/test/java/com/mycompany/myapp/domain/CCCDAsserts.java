package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CCCDAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCCCDAllPropertiesEquals(CCCD expected, CCCD actual) {
        assertCCCDAutoGeneratedPropertiesEquals(expected, actual);
        assertCCCDAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCCCDAllUpdatablePropertiesEquals(CCCD expected, CCCD actual) {
        assertCCCDUpdatableFieldsEquals(expected, actual);
        assertCCCDUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCCCDAutoGeneratedPropertiesEquals(CCCD expected, CCCD actual) {
        assertThat(expected)
            .as("Verify CCCD auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCCCDUpdatableFieldsEquals(CCCD expected, CCCD actual) {
        assertThat(expected)
            .as("Verify CCCD relevant properties")
            .satisfies(e -> assertThat(e.getFullName()).as("check fullName").isEqualTo(actual.getFullName()))
            .satisfies(e -> assertThat(e.getDateBirth()).as("check dateBirth").isEqualTo(actual.getDateBirth()))
            .satisfies(e -> assertThat(e.getSex()).as("check sex").isEqualTo(actual.getSex()))
            .satisfies(e -> assertThat(e.getNationality()).as("check nationality").isEqualTo(actual.getNationality()))
            .satisfies(e -> assertThat(e.getPlaceOrigin()).as("check placeOrigin").isEqualTo(actual.getPlaceOrigin()))
            .satisfies(e -> assertThat(e.getPlaceResidence()).as("check placeResidence").isEqualTo(actual.getPlaceResidence()))
            .satisfies(e -> assertThat(e.getDateIssue()).as("check dateIssue").isEqualTo(actual.getDateIssue()))
            .satisfies(e -> assertThat(e.getDateExpiry()).as("check dateExpiry").isEqualTo(actual.getDateExpiry()))
            .satisfies(e ->
                assertThat(e.getPersonalIdentification()).as("check personalIdentification").isEqualTo(actual.getPersonalIdentification())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCCCDUpdatableRelationshipsEquals(CCCD expected, CCCD actual) {
        assertThat(expected)
            .as("Verify CCCD relationships")
            .satisfies(e ->
                assertThat(e.getVehicleRegistrations()).as("check vehicleRegistrations").isEqualTo(actual.getVehicleRegistrations())
            );
    }
}
